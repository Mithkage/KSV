// src/PC_Importer.cs

// Add this using directive at the top with the others
using System.Text; // Required for Encoding support

// ... other using directives ...
using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.Attributes;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using Microsoft.VisualBasic.FileIO;

namespace PC_Importer
{
    [Transaction(TransactionMode.Manual)]
    [Regeneration(RegenerationOption.Manual)]
    public class PC_ImporterClass : IExternalCommand
    {
        public Result Execute(
          ExternalCommandData commandData,
          ref string message,
          ElementSet elements)
        {
            // ... (Code from sections 1 and 2 remains the same) ...
            UIApplication uiapp = commandData.Application;
            UIDocument uidoc = uiapp.ActiveUIDocument;
            var app = uiapp.Application;
            Document doc = uidoc.Document;

            // --- 1. Get CSV File Path from User ---
            string csvFilePath = GetCsvFilePath();
            if (string.IsNullOrEmpty(csvFilePath))
            {
                message = "Operation cancelled by user.";
                return Result.Cancelled;
            }

            // --- 2. Define Parameter Mapping ---
            Dictionary<string, string> parameterMapping = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
            {
                 {"Cable Reference", "PC_Cable Reference"},
                 {"SWB From", "PC_SWB From"},
                 {"SWB To", "PC_SWB To"},
                 {"SWB Type", "PC_SWB Type"},
                 {"SWB Load", "PC_SWB Load"},
                 {"SWB Load Scope", "PC_SWB Load Scope"},
                 {"SWB PF", "PC_SWB PF"},
                 {"Cable Length", "PC_Cable Length"},
                 {"Cable Size - Active conductors", "PC_Cable Size - Active conductors"},
                 {"Cable Size - Neutral conductors", "PC_Cable Size - Neutral conductors"},
                 {"Cable Size - Earthing conductor", "PC_Cable Size - Earthing conductor"},
                 {"Active Conductor material", "PC_Active Conductor material"},
                 {"# of Phases", "PC_# of Phases"},
                 {"Cable Type", "PC_Cable Type"},
                 {"Cable Insulation", "PC_Cable Insulation"},
                 {"Installation Method", "PC_Installation Method"},
                 {"Cable Additional De-rating", "PC_Cable Additional De-rating"},
                 {"Switchgear Trip Unit Type", "PC_Switchgear Trip Unit Type"},
                 {"Switchgear Manufacturer", "PC_Switchgear Manufacturer"},
                 {"Bus Type", "PC_Bus Type"},
                 {"Bus/Chassis Rating (A)", "PC_Bus/Chassis Rating (A)"},
                 {"Upstream Diversity", "PC_Upstream Diversity"},
                 {"Isolator Type", "PC_Isolator Type"},
                 {"Isolator Rating (A)", "PC_Isolator Rating (A)"},
                 {"Protective Device Rating (A)", "PC_Protective Device Rating (A)"},
                 {"Protective Device Manufacturer", "PC_Protective Device Manufacturer"},
                 {"Protective Device Type", "PC_Protective Device Type"},
                 {"Protective Device Model", "PC_Protective Device Model"},
                 {"Protective Device OCR/Trip Unit", "PC_Protective Device OCR/Trip Unit"},
                 {"Protective Device Trip Setting (A)", "PC_Protective Device Trip Setting (A)"}
             };


            // --- 3. Read and Parse CSV Data ---
            List<Dictionary<string, string>> csvData = new List<Dictionary<string, string>>();
            string[] headers = null;
            int swbToCsvIndex = -1;
            Dictionary<string, Dictionary<string, string>> csvLookup = null;

            try
            {
                // *** FIX: Specify ANSI encoding (using system default) ***
                // Use the constructor overload that takes an encoding. Encoding.Default gets the system's ANSI code page.
                using (TextFieldParser parser = new TextFieldParser(csvFilePath, Encoding.Default))
                // ********************************************************
                {
                    parser.TextFieldType = FieldType.Delimited;
                    parser.SetDelimiters(",");
                    parser.HasFieldsEnclosedInQuotes = true; // Keep this if your ANSI CSV might have quoted fields

                    // Check for header row
                    if (!parser.EndOfData) {
                        headers = parser.ReadFields()?.Select(h => h.Trim()).ToArray();
                        if (headers == null || headers.Length == 0) {
                            message = "CSV header row missing or empty.";
                            TaskDialog.Show("CSV Error", message);
                            return Result.Failed;
                        }
                        // Find the crucial 'SWB To' column index (case-insensitive)
                        swbToCsvIndex = Array.FindIndex(headers, h => h.Equals("SWB To", StringComparison.OrdinalIgnoreCase));
                        if (swbToCsvIndex < 0) {
                            message = "CSV header row does not contain the required 'SWB To' column.";
                            TaskDialog.Show("CSV Error", message);
                            return Result.Failed;
                        }
                    } else {
                        message = "CSV file appears empty (no header row found).";
                        TaskDialog.Show("CSV Error", message);
                        return Result.Failed;
                    }

                    // Read data rows
                    while (!parser.EndOfData) {
                        string[] fields = parser.ReadFields();
                        // Ensure row has the same number of fields as the header
                        if (fields != null && headers != null && fields.Length == headers.Length) {
                            var rowData = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                            for (int i = 0; i < headers.Length; i++) {
                                // Store data if header is relevant (in mapping or is 'SWB To')
                                if (!string.IsNullOrWhiteSpace(headers[i]) && (parameterMapping.ContainsKey(headers[i]) || i == swbToCsvIndex)) {
                                    rowData[headers[i]] = fields[i]?.Trim() ?? string.Empty;
                                }
                            }
                            // Add row to list ONLY if 'SWB To' column has a non-whitespace value
                            if (rowData.ContainsKey("SWB To") && !string.IsNullOrWhiteSpace(rowData["SWB To"])) {
                                csvData.Add(rowData);
                            }
                        } else if (fields != null) {
                            // Optional: Log skipped rows due to mismatched field count
                             System.Diagnostics.Debug.WriteLine($"Skipping CSV row {parser.LineNumber}: Expected {headers?.Length ?? 0} fields, found {fields.Length}.");
                        }
                    }
                } // End using TextFieldParser

                // Check if any valid data rows were actually found and added
                 if (!csvData.Any()) {
                      message = "No valid data rows found in CSV. Check that the 'SWB To' column contains values in the data rows.";
                      TaskDialog.Show("CSV Warning", message);
                      // Decide if this is success or failure - Succeeded means the add-in ran but did nothing.
                      return Result.Succeeded;
                 }

                 // Create the lookup dictionary from the valid rows found
                 csvLookup = new Dictionary<string, Dictionary<string, string>>(StringComparer.OrdinalIgnoreCase);
                 foreach(var row in csvData) {
                     // Handle potential duplicate 'SWB To' keys if necessary, here it overwrites
                     csvLookup[row["SWB To"]] = row;
                 }
            }
            catch (IOException ioEx) { // Catch file access errors
                 message = $"Error accessing CSV file: {ioEx.Message}\nEnsure the file is not open in another program.";
                 TaskDialog.Show("File Access Error", message);
                 return Result.Failed;
            }
            catch (Exception ex) { // Catch other parsing/reading errors
                // Include line number if possible (TextFieldParser throws MalformedLineException)
                long lineNumber = -1;
                if (ex is MalformedLineException mex) {
                    lineNumber = mex.LineNumber;
                }
                 message = $"Error reading/parsing CSV" + (lineNumber > 0 ? $" near line {lineNumber}" : "") + $": {ex.Message}";
                 TaskDialog.Show("CSV Error", message);
                 return Result.Failed;
            }

            // --- 4. Find and Filter Detail Items ---
            // ... (Filtering logic remains the same - PC_PowerCAD check is removed) ...
            FilteredElementCollector collector = new FilteredElementCollector(doc);
            List<Element> detailItemsToUpdate;
            try
            {
                detailItemsToUpdate = collector
                    .OfCategory(BuiltInCategory.OST_DetailComponents)
                    .OfClass(typeof(FamilyInstance))
                    .WhereElementIsNotElementType()
                    .ToList()
                    .Where(el =>
                    {
                        try
                        {
                            Parameter swbToParam = el.LookupParameter("PC_SWB To");
                            return swbToParam != null
                                && swbToParam.HasValue
                                && !string.IsNullOrWhiteSpace(swbToParam.AsString());
                        }
                        catch (Exception ex)
                        {
                            System.Diagnostics.Debug.WriteLine($"Error checking parameters for Element ID {el.Id}: {ex.Message}");
                            return false;
                        }
                    })
                    .ToList();
            }
            catch (Exception ex) {
                 message = $"Error filtering elements: {ex.Message}"; TaskDialog.Show("Revit Element Error", message); return Result.Failed;
            }
             if (!detailItemsToUpdate.Any()) { TaskDialog.Show("Info", "No Detail Items found with a non-empty 'PC_SWB To' parameter."); return Result.Succeeded; }


            // --- 5. Update Parameters within a Transaction ---
            // ... (Transaction logic remains the same) ...
            int updatedCount = 0;
            int skippedCount = 0;
            List<string> errors = new List<string>();
            using (Transaction tx = new Transaction(doc)) {
                 try {
                      tx.Start("Import PowerCAD CSV Data");
                       foreach (Element detailItem in detailItemsToUpdate) {
                            Parameter swbToParamRevit = detailItem.LookupParameter("PC_SWB To");
                            string swbToValueRevit = swbToParamRevit?.AsString();
                            if (string.IsNullOrEmpty(swbToValueRevit)) { skippedCount++; continue; } // Safety check

                            if (csvLookup != null && csvLookup.TryGetValue(swbToValueRevit, out var matchingCsvRow)) {
                                 bool itemUpdated = false;
                                 foreach (var kvp in parameterMapping) {
                                      string csvHeader = kvp.Key; string revitParamName = kvp.Value;
                                      if (matchingCsvRow.TryGetValue(csvHeader, out string csvValue)) {
                                           Parameter targetParam = detailItem.LookupParameter(revitParamName);
                                           if (targetParam != null && !targetParam.IsReadOnly) {
                                                try {
                                                     string currentValueStr = GetParameterValueAsString(targetParam);
                                                     if (currentValueStr != csvValue) {
                                                          bool success = SetParameterValueFromString(targetParam, csvValue);
                                                          if(success) itemUpdated = true;
                                                          else errors.Add($"Could not set '{csvValue}' for '{revitParamName}' (Type: {targetParam.StorageType}) on Elem ID {detailItem.Id}.");
                                                     }
                                                } catch (Exception ex) { errors.Add($"Error setting '{revitParamName}' on Elem ID {detailItem.Id}: {ex.Message}"); }
                                           } else if (targetParam == null) {
                                               // Optional: Log if a mapped parameter doesn't exist on the element
                                               System.Diagnostics.Debug.WriteLine($"Parameter '{revitParamName}' not found on Element ID {detailItem.Id}.");
                                           }
                                      }
                                 }
                                  if (itemUpdated) updatedCount++;
                                  else skippedCount++; // Skipped because values already matched
                            } else {
                                skippedCount++; // Skipped because no matching 'SWB To' found in CSV data
                                // Optional: Log the Revit value that wasn't found in the CSV
                                System.Diagnostics.Debug.WriteLine($"Revit 'PC_SWB To' value '{swbToValueRevit}' (Elem ID {detailItem.Id}) not found in CSV lookup.");
                            }
                       }

                        // Commit/Rollback logic
                        if (updatedCount > 0 || errors.Any())
                        {
                            tx.Commit();
                            if (updatedCount == 0 && errors.Any()) { message = "Potential issues encountered during update. See error details."; }
                            else if (updatedCount > 0) { message = $"Successfully updated parameters for {updatedCount} elements."; }
                        } else {
                            tx.RollBack();
                            message = "No parameter changes were necessary based on the CSV data and existing element values."; // More specific message
                        }

                 } catch (Exception ex) {
                      tx.RollBack(); message = $"Transaction error: {ex.Message}"; TaskDialog.Show("Transaction Error", message); return Result.Failed;
                 }
            }


            // --- 6. Report Results ---
            // ... (Reporting logic remains the same) ...
             string summary = $"Import complete.\n\n" +
                              $"Detail Items processed (having non-empty 'PC_SWB To'): {detailItemsToUpdate.Count}\n" +
                              $"Detail Items with parameters updated: {updatedCount}\n" +
                              $"Detail Items skipped (No CSV match / No change required): {skippedCount}\n";

             if (!string.IsNullOrEmpty(message) && !(updatedCount > 0 && !errors.Any()) )
             {
                  summary += $"\nStatus: {message}\n";
             }

             if (errors.Any()) {
                  summary += $"\nEncountered {errors.Count} errors/warnings during parameter setting:\n";
                  summary += string.Join("\n", errors.Take(15)); if (errors.Count > 15) summary += "\n...";
                  TaskDialog.Show("Import Report with Errors/Warnings", summary);
             } else { TaskDialog.Show("Import Report", summary); }

             return errors.Any() ? Result.Failed : Result.Succeeded;
        }

        // --- Helper Methods ---
        // (GetCsvFilePath, SetParameterValueFromString, GetParameterValueAsString remain the same)
        private string GetCsvFilePath()
        {
             string filePath = null;
             System.Threading.Thread t = new System.Threading.Thread(() => {
                  using (OpenFileDialog openFileDialog = new OpenFileDialog()) {
                       openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                       openFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*";
                       openFileDialog.FilterIndex = 1; openFileDialog.RestoreDirectory = true; openFileDialog.Title = "Select PowerCAD Data CSV File";
                       if (openFileDialog.ShowDialog() == DialogResult.OK) filePath = openFileDialog.FileName;
                  }
             });
             t.SetApartmentState(System.Threading.ApartmentState.STA); t.Start(); t.Join();
             return filePath;
        }

        private bool SetParameterValueFromString(Parameter param, string value)
        {
             if (param == null || param.IsReadOnly) return false;
             try {
                  switch (param.StorageType) {
                       case StorageType.Double:
                            if (double.TryParse(value, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out double doubleVal)) { param.Set(doubleVal); return true; } break;
                       case StorageType.Integer:
                            Definition def = param.Definition;
                            ForgeTypeId specTypeId = def.GetDataType();
                            if (specTypeId == SpecTypeId.Boolean.YesNo)
                            {
                                 if (value.Equals("Yes", StringComparison.OrdinalIgnoreCase) || value == "1") { param.Set(1); return true;}
                                 else if (value.Equals("No", StringComparison.OrdinalIgnoreCase) || value == "0") { param.Set(0); return true;}
                            }
                            else
                            {
                                 if (int.TryParse(value, out int intVal)) { param.Set(intVal); return true; }
                            }
                            break;
                       case StorageType.String: param.Set(value); return true;
                       case StorageType.ElementId:
                            Definition defId = param.Definition;
                            ForgeTypeId specTypeIdId = defId.GetDataType();
                            if (specTypeIdId == SpecTypeId.Boolean.YesNo)
                            {
                                System.Diagnostics.Debug.WriteLine($"Warning: Attempting to set Yes/No parameter '{param.Definition.Name}' stored as ElementId. This is unreliable.");
                                return false;
                            }
                            break;
                       default: try { param.Set(value); return true; } catch { return false; }
                  }
             } catch (Exception ex) { System.Diagnostics.Debug.WriteLine($"Error setting param {param.Definition.Name} to '{value}': {ex.Message}"); return false; }
             return false;
        }

        private string GetParameterValueAsString(Parameter param)
        {
             if (param == null || !param.HasValue) return string.Empty;
             switch (param.StorageType) {
                  case StorageType.Double: return param.AsDouble().ToString(System.Globalization.CultureInfo.InvariantCulture);
                  case StorageType.Integer:
                       Definition def = param.Definition;
                       ForgeTypeId specTypeId = def.GetDataType();
                       if (specTypeId == SpecTypeId.Boolean.YesNo)
                       {
                            return param.AsInteger() == 1 ? "Yes" : "No";
                       }
                       return param.AsInteger().ToString();
                  case StorageType.String: return param.AsString() ?? string.Empty;
                  case StorageType.ElementId:
                       ElementId id = param.AsElementId();
                       if (id == null) return string.Empty;
                       Definition defId = param.Definition;
                       ForgeTypeId specTypeIdId = defId.GetDataType();
                        if (specTypeIdId == SpecTypeId.Boolean.YesNo)
                        {
                            try {
                                int intVal = param.AsInteger();
                                return intVal == 1 ? "Yes" : "No";
                            } catch {
                                return (id.IntegerValue != 0 && id.IntegerValue != -1) ? "Yes" : "No";
                            }
                        }
                       return param.AsValueString() ?? id.IntegerValue.ToString();
                  default: return param.AsValueString() ?? string.Empty;
             }
        }

    } // End class PC_Importer
} // End namespace