using Autodesk.Revit.Attributes;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using Excel = Microsoft.Office.Interop.Excel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.IO;

namespace PC_Exporter
{
    [Transaction(TransactionMode.Manual)]
    public class PowerCAD_ExportSLD : IExternalCommand
    {
        // Helper class to store data for each relevant detail item
        private class DetailItemData
        {
            public string OriginalCableReference { get; set; } // Raw value from Revit parameter
            public string FinalCableReference { get; set; }    // The definitive reference used for the group
            public string SWBFrom { get; set; }
            public string SWBTo { get; set; }
            public string SWBType { get; set; } // 'S' for Bus, 'T' for TOB, potentially others
            public string SWBLoad { get; set; }
            public string SWBLoadScope { get; set; }
            public string SWBPF { get; set; }
            public string CableLength { get; set; }
            public string CableSizeActive { get; set; }
            public string CableSizeNeutral { get; set; }
            public string CableSizeEarthing { get; set; }
            public string ActiveConductorMaterial { get; set; }
            public string NumPhases { get; set; }
            public string CableType { get; set; } // Set to SDI if Type Name contains "TOB"
            public string CableInsulation { get; set; } // ** UPDATED based on PC_From containing "SAFETY" **
            public string InstallationMethod { get; set; } // ** UPDATED to always be "PT" **
            public string CableAdditionalDerating { get; set; }
            public string SwitchgearTripUnitType { get; set; }
            public string SwitchgearManufacturer { get; set; } // ** UPDATED to always be "NAW Controls - LS Susol" **
            public string BusType { get; set; } // Set to "Bus Bar"
            public string BusChassisRating { get; set; }
            public string UpstreamDiversity { get; set; } // ** UPDATED to always be "STD" **
            public string IsolatorType { get; set; }
            public string IsolatorRating { get; set; }
            public string ProtectiveDeviceRating { get; set; }
            public string ProtectiveDeviceManufacturer { get; set; }
            public string ProtectiveDeviceType { get; set; }
            public string ProtectiveDeviceModel { get; set; }
            public string ProtectiveDeviceOCRTripUnit { get; set; }
            public string ProtectiveDeviceTripSetting { get; set; }
        }

        // Helper function to escape characters for CSV format
        private string EscapeCsvField(string field)
        {
            if (field == null) return "";
            if (field.Contains(",") || field.Contains("\"") || field.Contains("\n") || field.Contains("\r"))
            {
                string escapedField = field.Replace("\"", "\"\"");
                return $"\"{escapedField}\"";
            }
            else
            {
                return field;
            }
        }

        // --- Member variables for Pre-order Traversal ---
        private List<DetailItemData> _preOrderSortedData;
        private HashSet<string> _visitedNodesDuringTraversal;
        private Dictionary<string, List<DetailItemData>> _itemsOriginatingFrom;


        public Result Execute(ExternalCommandData commandData, ref string message, ElementSet elements)
        {
            UIApplication uiApp = commandData.Application;
            Document doc = uiApp.ActiveUIDocument.Document;

            // Filter for Detail Items
            FilteredElementCollector collector = new FilteredElementCollector(doc);
            List<Element> detailItems = collector.OfCategory(BuiltInCategory.OST_DetailComponents)
                                                 .WhereElementIsNotElementType()
                                                 .ToList();

            if (detailItems.Count == 0)
            {
                TaskDialog.Show("Info", "No Detail Items found in the current view/document.");
                return Result.Succeeded;
            }

            // --- Step 1: Data Collection & Pre-processing ---
            var groupedData = new Dictionary<string, List<DetailItemData>>();
            var allNodes = new HashSet<string>();

            foreach (Element detailItem in detailItems)
            {
                Parameter pcPowerCADParam = detailItem.LookupParameter("PC_PowerCAD");
                Parameter pcSWBToParam = detailItem.LookupParameter("PC_SWB To");
                Parameter pcSWBFromParam = detailItem.LookupParameter("PC_From");

                if (pcPowerCADParam != null && pcPowerCADParam.AsInteger() == 1 &&
                    pcSWBToParam != null && !string.IsNullOrWhiteSpace(pcSWBToParam.AsString()))
                {
                    string swbToValue = pcSWBToParam.AsString();
                    string swbFromValue = pcSWBFromParam?.AsString() ?? "";
                    if (string.IsNullOrWhiteSpace(swbFromValue))
                    {
                        swbFromValue = "SOURCE";
                    }

                    Parameter pcCableReferenceParam = detailItem.LookupParameter("PC_Cable Reference");
                    string cableReferenceValue = pcCableReferenceParam?.AsString() ?? "";

                    allNodes.Add(swbToValue);
                    allNodes.Add(swbFromValue);

                    string swbTypeValue = "";
                    string cableTypeValue = "";
                    string cableInsulationValue = ""; // Initialize Cable Insulation

                    ElementId elementTypeId = detailItem.GetTypeId();
                    if (elementTypeId != null && elementTypeId != ElementId.InvalidElementId)
                    {
                        ElementType elementType = doc.GetElement(elementTypeId) as ElementType;
                        if (elementType != null)
                        {
                            string typeName = elementType.Name;
                            if (!string.IsNullOrEmpty(typeName))
                            {
                                if (typeName.IndexOf("BUS", StringComparison.OrdinalIgnoreCase) >= 0)
                                {
                                    swbTypeValue = "S";
                                }
                                else if (typeName.IndexOf("TOB", StringComparison.OrdinalIgnoreCase) >= 0)
                                {
                                    swbTypeValue = "T";
                                    cableTypeValue = "SDI"; // Set Cable Type if TOB
                                }
                            }
                        }
                    }

                    // *** NEW: Check PC_From for "SAFETY" to set Cable Insulation ***
                    if (swbFromValue.IndexOf("SAFETY", StringComparison.OrdinalIgnoreCase) >= 0)
                    {
                        cableInsulationValue = "X-HF-110";
                    }

                    // Create a data object for the current detail item
                    var data = new DetailItemData
                    {
                        OriginalCableReference = cableReferenceValue,
                        SWBFrom = swbFromValue,
                        SWBTo = swbToValue,
                        SWBType = swbTypeValue,
                        SWBLoad = detailItem.LookupParameter("PC_Protective Device Trip Setting (A)")?.AsString() ?? "",
                        SWBLoadScope = "Local",
                        SWBPF = "1",
                        CableLength = "",
                        CableSizeActive = "",
                        CableSizeNeutral = "",
                        CableSizeEarthing = "",
                        ActiveConductorMaterial = "",
                        NumPhases = "",
                        CableType = cableTypeValue, // Includes "SDI" if applicable
                        // *** Set Cable Insulation based on the check above ***
                        CableInsulation = cableInsulationValue,
                        // *** NEW: Set Installation Method to "PT" for all ***
                        InstallationMethod = "PT",
                        CableAdditionalDerating = "",
                        SwitchgearTripUnitType = "",
                        // *** NEW: Set Switchgear Manufacturer for all ***
                        SwitchgearManufacturer = "NAW Controls - LS Susol",
                        BusType = "Bus Bar", // Set during previous update
                        BusChassisRating = detailItem.LookupParameter("PC_Bus/Chassis Rating (A)")?.AsString() ?? "",
                        // *** NEW: Set Upstream Diversity to "STD" for all ***
                        UpstreamDiversity = "STD",
                        IsolatorType = "",
                        IsolatorRating = "",
                        ProtectiveDeviceRating = detailItem.LookupParameter("PC_Protective Device Trip Setting (A)")?.AsString() ?? "",
                        ProtectiveDeviceManufacturer = "", // Note: SwitchgearManufacturer is set above, maybe this should align? Review if needed.
                        ProtectiveDeviceType = "",
                        ProtectiveDeviceModel = "",
                        ProtectiveDeviceOCRTripUnit = "",
                        ProtectiveDeviceTripSetting = ""
                    };

                    if (!groupedData.ContainsKey(swbToValue))
                    {
                        groupedData[swbToValue] = new List<DetailItemData>();
                    }
                    groupedData[swbToValue].Add(data);
                }
            }

            if (groupedData.Count == 0)
            {
                TaskDialog.Show("Info", "No Detail Items marked for export (PC_PowerCAD = 1) or with valid 'PC_SWB To' values were found.");
                return Result.Succeeded;
            }

            // --- Step 2: Determine Definitive Cable Reference & Create Flat List ---
            var definitiveCableReferencePerGroup = new Dictionary<string, string>();
            var allProcessedData = new List<DetailItemData>();

            foreach (var kvp in groupedData)
            {
                string swbTo = kvp.Key;
                List<DetailItemData> itemsInGroup = kvp.Value;
                string foundReference = "";

                foreach (var itemData_ref in itemsInGroup)
                {
                    if (!string.IsNullOrWhiteSpace(itemData_ref.OriginalCableReference))
                    {
                        foundReference = itemData_ref.OriginalCableReference;
                        break;
                    }
                }
                definitiveCableReferencePerGroup[swbTo] = foundReference;

                foreach (var itemData_ref in itemsInGroup)
                {
                    itemData_ref.FinalCableReference = foundReference;
                    allProcessedData.Add(itemData_ref);
                }
            }

            // --- Step 2b: Initial Sort by Cable Reference ---
            allProcessedData = allProcessedData
                .OrderBy(d => d.FinalCableReference ?? string.Empty)
                .ToList();

            // --- Step 3: Build Dependency Graph ---
             var inDegree = new Dictionary<string, int>();
             foreach(string node in allNodes)
             {
                 if (!inDegree.ContainsKey(node)) inDegree[node] = 0;
             }

             _itemsOriginatingFrom = allProcessedData
                 .GroupBy(d => d.SWBFrom)
                 .ToDictionary(g => g.Key, g => g.ToList());

             foreach (var item in allProcessedData)
             {
                 string v = item.SWBTo;
                 if (inDegree.ContainsKey(v))
                 {
                     if(item.SWBFrom != "SOURCE" || allNodes.Contains("SOURCE"))
                     {
                          inDegree[v]++;
                     }
                 }
             }

            // --- Step 4: Perform Pre-order Traversal Sort ---
            _preOrderSortedData = new List<DetailItemData>();
            _visitedNodesDuringTraversal = new HashSet<string>();

            var startingNodes = inDegree.Where(kvp => kvp.Value == 0).Select(kvp => kvp.Key).ToList();

            if (allNodes.Contains("SOURCE") && !startingNodes.Contains("SOURCE"))
            {
                 bool sourceHasIncoming = allProcessedData.Any(d => d.SWBTo == "SOURCE");
                 if(!sourceHasIncoming) startingNodes.Add("SOURCE");
            }

            startingNodes.Sort();

            foreach (string startNode in startingNodes)
            {
                PreOrderVisit(startNode);
            }

             // --- Step 5: Merge Data for Unique SWB To ---
            var mergedUniqueDataList = new List<DetailItemData>();
            var lookupMap = new Dictionary<string, DetailItemData>();

            foreach(var newItemData in _preOrderSortedData)
            {
                string currentSwbTo = newItemData.SWBTo;
                if (lookupMap.TryGetValue(currentSwbTo, out DetailItemData existingItemData))
                {
                    MergeDetailItemData(existingItemData, newItemData);
                }
                else
                {
                    mergedUniqueDataList.Add(newItemData);
                    lookupMap.Add(currentSwbTo, newItemData);
                }
            }


            // --- Step 6: Write Output Files ---
            string baseFileName = "PowerCAD_Export_SLD_Data";
            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string csvFilePath = Path.Combine(desktopPath, baseFileName + ".csv");
            string xlsxFilePath = Path.Combine(desktopPath, baseFileName + ".xlsx");

            bool csvSuccess = false;
            bool xlsxSuccess = false;
            string csvError = null;
            string xlsxError = null;

            string[] headers = {
                "Cable Reference", "SWB From", "SWB To", "SWB Type", "SWB Load",
                "SWB Load Scope", "SWB PF", "Cable Length", "Cable Size - Active conductors",
                "Cable Size - Neutral conductors", "Cable Size - Earthing conductor",
                "Active Conductor material", "# of Phases", "Cable Type", "Cable Insulation",
                "Installation Method", "Cable Additional De-rating", "Switchgear Trip Unit Type",
                "Switchgear Manufacturer", "Bus Type", "Bus/Chassis Rating (A)", "Upstream Diversity",
                "Isolator Type", "Isolator Rating (A)", "Protective Device Rating (A)",
                "Protective Device Manufacturer", "Protective Device Type", "Protective Device Model",
                "Protective Device OCR/Trip Unit", "Protective Device Trip Setting (A)"
            };

            // --- Write CSV File ---
            try
            {
                StringBuilder csvContent = new StringBuilder();
                csvContent.AppendLine(string.Join(",", headers.Select(h => EscapeCsvField(h))));

                foreach (var itemData in mergedUniqueDataList)
                {
                    string displaySwbFrom = (itemData.SWBFrom == "SOURCE") ? "" : itemData.SWBFrom;

                    var fields = new List<string> {
                        EscapeCsvField(itemData.FinalCableReference),
                        EscapeCsvField(displaySwbFrom),
                        EscapeCsvField(itemData.SWBTo),
                        EscapeCsvField(itemData.SWBType),
                        EscapeCsvField(itemData.SWBLoad),
                        EscapeCsvField(itemData.SWBLoadScope),
                        EscapeCsvField(itemData.SWBPF),
                        EscapeCsvField(itemData.CableLength),
                        EscapeCsvField(itemData.CableSizeActive),
                        EscapeCsvField(itemData.CableSizeNeutral),
                        EscapeCsvField(itemData.CableSizeEarthing),
                        EscapeCsvField(itemData.ActiveConductorMaterial),
                        EscapeCsvField(itemData.NumPhases),
                        EscapeCsvField(itemData.CableType),
                        EscapeCsvField(itemData.CableInsulation), // Includes "X-HF-110" if applicable
                        EscapeCsvField(itemData.InstallationMethod), // Will be "PT"
                        EscapeCsvField(itemData.CableAdditionalDerating),
                        EscapeCsvField(itemData.SwitchgearTripUnitType),
                        EscapeCsvField(itemData.SwitchgearManufacturer), // Will be "NAW Controls - LS Susol"
                        EscapeCsvField(itemData.BusType),
                        EscapeCsvField(itemData.BusChassisRating),
                        EscapeCsvField(itemData.UpstreamDiversity), // Will be "STD"
                        EscapeCsvField(itemData.IsolatorType),
                        EscapeCsvField(itemData.IsolatorRating),
                        EscapeCsvField(itemData.ProtectiveDeviceRating),
                        EscapeCsvField(itemData.ProtectiveDeviceManufacturer),
                        EscapeCsvField(itemData.ProtectiveDeviceType),
                        EscapeCsvField(itemData.ProtectiveDeviceModel),
                        EscapeCsvField(itemData.ProtectiveDeviceOCRTripUnit),
                        EscapeCsvField(itemData.ProtectiveDeviceTripSetting)
                    };
                    csvContent.AppendLine(string.Join(",", fields));
                }
                File.WriteAllText(csvFilePath, csvContent.ToString(), new UTF8Encoding(false));
                csvSuccess = true;
            }
            catch (Exception ex)
            {
                csvError = $"Failed to write CSV file: {ex.Message}";
            }

            // --- Write XLSX File ---
            Excel.Application excelApp = null;
            Excel.Workbook workbook = null;
            Excel.Worksheet worksheet = null;
            try
            {
                excelApp = new Excel.Application { Visible = false, DisplayAlerts = false };
                workbook = excelApp.Workbooks.Add();
                worksheet = (Excel.Worksheet)workbook.Sheets[1];

                for (int i = 0; i < headers.Length; i++)
                {
                    worksheet.Cells[1, i + 1] = headers[i];
                }

                Excel.Range cableRefColumn = (Excel.Range)worksheet.Columns[1];
                cableRefColumn.NumberFormat = "@"; // Set Cable Reference column to Text

                int row = 2;
                foreach (var itemData in mergedUniqueDataList)
                {
                    string displaySwbFrom = (itemData.SWBFrom == "SOURCE") ? "" : itemData.SWBFrom;

                    worksheet.Cells[row, 1] = itemData.FinalCableReference;
                    worksheet.Cells[row, 2] = displaySwbFrom;
                    worksheet.Cells[row, 3] = itemData.SWBTo;
                    worksheet.Cells[row, 4] = itemData.SWBType;
                    worksheet.Cells[row, 5] = itemData.SWBLoad;
                    worksheet.Cells[row, 6] = itemData.SWBLoadScope;
                    worksheet.Cells[row, 7] = itemData.SWBPF;
                    worksheet.Cells[row, 8] = itemData.CableLength;
                    worksheet.Cells[row, 9] = itemData.CableSizeActive;
                    worksheet.Cells[row, 10] = itemData.CableSizeNeutral;
                    worksheet.Cells[row, 11] = itemData.CableSizeEarthing;
                    worksheet.Cells[row, 12] = itemData.ActiveConductorMaterial;
                    worksheet.Cells[row, 13] = itemData.NumPhases;
                    worksheet.Cells[row, 14] = itemData.CableType;
                    worksheet.Cells[row, 15] = itemData.CableInsulation; // Includes "X-HF-110" if applicable
                    worksheet.Cells[row, 16] = itemData.InstallationMethod; // Will be "PT"
                    worksheet.Cells[row, 17] = itemData.CableAdditionalDerating;
                    worksheet.Cells[row, 18] = itemData.SwitchgearTripUnitType;
                    worksheet.Cells[row, 19] = itemData.SwitchgearManufacturer; // Will be "NAW Controls - LS Susol"
                    worksheet.Cells[row, 20] = itemData.BusType;
                    worksheet.Cells[row, 21] = itemData.BusChassisRating;
                    worksheet.Cells[row, 22] = itemData.UpstreamDiversity; // Will be "STD"
                    worksheet.Cells[row, 23] = itemData.IsolatorType;
                    worksheet.Cells[row, 24] = itemData.IsolatorRating;
                    worksheet.Cells[row, 25] = itemData.ProtectiveDeviceRating;
                    worksheet.Cells[row, 26] = itemData.ProtectiveDeviceManufacturer;
                    worksheet.Cells[row, 27] = itemData.ProtectiveDeviceType;
                    worksheet.Cells[row, 28] = itemData.ProtectiveDeviceModel;
                    worksheet.Cells[row, 29] = itemData.ProtectiveDeviceOCRTripUnit;
                    worksheet.Cells[row, 30] = itemData.ProtectiveDeviceTripSetting;

                    row++;
                }

                worksheet.Columns.AutoFit();
                workbook.SaveAs(xlsxFilePath);
                xlsxSuccess = true;
            }
            catch (Exception ex)
            {
                xlsxError = $"Failed to write XLSX file: {ex.Message}";
            }
            finally
            {
                if (worksheet != null) Marshal.ReleaseComObject(worksheet);
                if (workbook != null)
                {
                    workbook.Close(false);
                    Marshal.ReleaseComObject(workbook);
                }
                if (excelApp != null)
                {
                    excelApp.Quit();
                    Marshal.ReleaseComObject(excelApp);
                }
                GC.Collect();
                GC.WaitForPendingFinalizers();
            }

            // --- Final Reporting ---
            StringBuilder finalMessage = new StringBuilder();
            finalMessage.AppendLine("Export Process Completed.");
            finalMessage.AppendLine("---");

            if (csvSuccess)
            {
                finalMessage.AppendLine($"CSV export successful:\n{csvFilePath}");
            }
            else
            {
                finalMessage.AppendLine($"CSV export FAILED: {csvError ?? "Unknown error"}");
            }
            finalMessage.AppendLine("---");
            if (xlsxSuccess)
            {
                finalMessage.AppendLine($"XLSX export successful:\n{xlsxFilePath}");
            }
            else
            {
                finalMessage.AppendLine($"XLSX export FAILED: {xlsxError ?? "Unknown error"}");
            }

            TaskDialog.Show("Export Results", finalMessage.ToString());

            if (csvSuccess && xlsxSuccess)
            {
                return Result.Succeeded;
            }
            else if (csvSuccess || xlsxSuccess)
            {
                return Result.Succeeded;
            }
            else
            {
                message = "Both CSV and XLSX exports failed.";
                return Result.Failed;
            }
        }

        // --- Recursive Pre-order Traversal Method ---
        private void PreOrderVisit(string nodeName)
        {
            if (!_visitedNodesDuringTraversal.Add(nodeName))
            {
                return;
            }

            if (_itemsOriginatingFrom.TryGetValue(nodeName, out var outgoingItems))
            {
                // Iterating through children already sorted by Cable Reference
                foreach (var childItem in outgoingItems)
                {
                    _preOrderSortedData.Add(childItem);
                    PreOrderVisit(childItem.SWBTo);
                }
            }
            _visitedNodesDuringTraversal.Remove(nodeName);
        }


        // --- Helper method to merge data ---
        // Prioritizes existing non-empty values.
        private void MergeDetailItemData(DetailItemData existing, DetailItemData newItem)
        {
            // Only update existing fields if they are currently empty/null AND the new item has a value.
            // This prevents overwriting specifically set values (like X-HF-110) with blanks.
            if (string.IsNullOrWhiteSpace(existing.FinalCableReference) && !string.IsNullOrWhiteSpace(newItem.FinalCableReference)) existing.FinalCableReference = newItem.FinalCableReference;
            if (string.IsNullOrWhiteSpace(existing.SWBFrom) && !string.IsNullOrWhiteSpace(newItem.SWBFrom)) existing.SWBFrom = newItem.SWBFrom;
            if (string.IsNullOrWhiteSpace(existing.SWBType) && !string.IsNullOrWhiteSpace(newItem.SWBType)) existing.SWBType = newItem.SWBType;
            if (string.IsNullOrWhiteSpace(existing.SWBLoad) && !string.IsNullOrWhiteSpace(newItem.SWBLoad)) existing.SWBLoad = newItem.SWBLoad;
            if (string.IsNullOrWhiteSpace(existing.SWBLoadScope) && !string.IsNullOrWhiteSpace(newItem.SWBLoadScope)) existing.SWBLoadScope = newItem.SWBLoadScope;
            if (string.IsNullOrWhiteSpace(existing.SWBPF) && !string.IsNullOrWhiteSpace(newItem.SWBPF)) existing.SWBPF = newItem.SWBPF;
            if (string.IsNullOrWhiteSpace(existing.CableLength) && !string.IsNullOrWhiteSpace(newItem.CableLength)) existing.CableLength = newItem.CableLength;
            if (string.IsNullOrWhiteSpace(existing.CableSizeActive) && !string.IsNullOrWhiteSpace(newItem.CableSizeActive)) existing.CableSizeActive = newItem.CableSizeActive;
            if (string.IsNullOrWhiteSpace(existing.CableSizeNeutral) && !string.IsNullOrWhiteSpace(newItem.CableSizeNeutral)) existing.CableSizeNeutral = newItem.CableSizeNeutral;
            if (string.IsNullOrWhiteSpace(existing.CableSizeEarthing) && !string.IsNullOrWhiteSpace(newItem.CableSizeEarthing)) existing.CableSizeEarthing = newItem.CableSizeEarthing;
            if (string.IsNullOrWhiteSpace(existing.ActiveConductorMaterial) && !string.IsNullOrWhiteSpace(newItem.ActiveConductorMaterial)) existing.ActiveConductorMaterial = newItem.ActiveConductorMaterial;
            if (string.IsNullOrWhiteSpace(existing.NumPhases) && !string.IsNullOrWhiteSpace(newItem.NumPhases)) existing.NumPhases = newItem.NumPhases;
            if (string.IsNullOrWhiteSpace(existing.CableType) && !string.IsNullOrWhiteSpace(newItem.CableType)) existing.CableType = newItem.CableType;
            // *** Cable Insulation: Only overwrite if existing is blank and new one isn't ***
            if (string.IsNullOrWhiteSpace(existing.CableInsulation) && !string.IsNullOrWhiteSpace(newItem.CableInsulation)) existing.CableInsulation = newItem.CableInsulation;
             // *** Installation Method: Only overwrite if existing is blank and new one isn't (new one is always "PT" now) ***
            if (string.IsNullOrWhiteSpace(existing.InstallationMethod) && !string.IsNullOrWhiteSpace(newItem.InstallationMethod)) existing.InstallationMethod = newItem.InstallationMethod;
            else if (string.IsNullOrWhiteSpace(existing.InstallationMethod)) existing.InstallationMethod = "PT"; // Ensure it's set
            if (string.IsNullOrWhiteSpace(existing.CableAdditionalDerating) && !string.IsNullOrWhiteSpace(newItem.CableAdditionalDerating)) existing.CableAdditionalDerating = newItem.CableAdditionalDerating;
            if (string.IsNullOrWhiteSpace(existing.SwitchgearTripUnitType) && !string.IsNullOrWhiteSpace(newItem.SwitchgearTripUnitType)) existing.SwitchgearTripUnitType = newItem.SwitchgearTripUnitType;
            // *** Switchgear Manufacturer: Only overwrite if existing is blank and new one isn't (new one is always set now) ***
            if (string.IsNullOrWhiteSpace(existing.SwitchgearManufacturer) && !string.IsNullOrWhiteSpace(newItem.SwitchgearManufacturer)) existing.SwitchgearManufacturer = newItem.SwitchgearManufacturer;
             else if (string.IsNullOrWhiteSpace(existing.SwitchgearManufacturer)) existing.SwitchgearManufacturer = "NAW Controls - LS Susol"; // Ensure it's set
            if (string.IsNullOrWhiteSpace(existing.BusType) && !string.IsNullOrWhiteSpace(newItem.BusType)) existing.BusType = newItem.BusType;
            else if (string.IsNullOrWhiteSpace(existing.BusType)) existing.BusType = "Bus Bar";
            if (string.IsNullOrWhiteSpace(existing.BusChassisRating) && !string.IsNullOrWhiteSpace(newItem.BusChassisRating)) existing.BusChassisRating = newItem.BusChassisRating;
            // *** Upstream Diversity: Only overwrite if existing is blank and new one isn't (new one is always "STD" now) ***
             if (string.IsNullOrWhiteSpace(existing.UpstreamDiversity) && !string.IsNullOrWhiteSpace(newItem.UpstreamDiversity)) existing.UpstreamDiversity = newItem.UpstreamDiversity;
             else if (string.IsNullOrWhiteSpace(existing.UpstreamDiversity)) existing.UpstreamDiversity = "STD"; // Ensure it's set
            if (string.IsNullOrWhiteSpace(existing.IsolatorType) && !string.IsNullOrWhiteSpace(newItem.IsolatorType)) existing.IsolatorType = newItem.IsolatorType;
            if (string.IsNullOrWhiteSpace(existing.IsolatorRating) && !string.IsNullOrWhiteSpace(newItem.IsolatorRating)) existing.IsolatorRating = newItem.IsolatorRating;
            if (string.IsNullOrWhiteSpace(existing.ProtectiveDeviceRating) && !string.IsNullOrWhiteSpace(newItem.ProtectiveDeviceRating)) existing.ProtectiveDeviceRating = newItem.ProtectiveDeviceRating;
            if (string.IsNullOrWhiteSpace(existing.ProtectiveDeviceManufacturer) && !string.IsNullOrWhiteSpace(newItem.ProtectiveDeviceManufacturer)) existing.ProtectiveDeviceManufacturer = newItem.ProtectiveDeviceManufacturer;
            if (string.IsNullOrWhiteSpace(existing.ProtectiveDeviceType) && !string.IsNullOrWhiteSpace(newItem.ProtectiveDeviceType)) existing.ProtectiveDeviceType = newItem.ProtectiveDeviceType;
            if (string.IsNullOrWhiteSpace(existing.ProtectiveDeviceModel) && !string.IsNullOrWhiteSpace(newItem.ProtectiveDeviceModel)) existing.ProtectiveDeviceModel = newItem.ProtectiveDeviceModel;
            if (string.IsNullOrWhiteSpace(existing.ProtectiveDeviceOCRTripUnit) && !string.IsNullOrWhiteSpace(newItem.ProtectiveDeviceOCRTripUnit)) existing.ProtectiveDeviceOCRTripUnit = newItem.ProtectiveDeviceOCRTripUnit;
            if (string.IsNullOrWhiteSpace(existing.ProtectiveDeviceTripSetting) && !string.IsNullOrWhiteSpace(newItem.ProtectiveDeviceTripSetting)) existing.ProtectiveDeviceTripSetting = newItem.ProtectiveDeviceTripSetting;
        }

    } // End class PowerCAD_ExportSLD
} // End namespace PC_Exporter